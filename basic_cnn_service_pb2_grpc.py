# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import basic_cnn_service_pb2 as basic__cnn__service__pb2


class BasicCNNServiceStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LoadSampleData = channel.unary_stream(
                '/basic_ai_service.BasicCNNService/LoadSampleData',
                request_serializer=basic__cnn__service__pb2.SampleData.SerializeToString,
                response_deserializer=basic__cnn__service__pb2.LoadingSummary.FromString,
                )
        self.LoadTrainedModel = channel.unary_stream(
                '/basic_ai_service.BasicCNNService/LoadTrainedModel',
                request_serializer=basic__cnn__service__pb2.ModelData.SerializeToString,
                response_deserializer=basic__cnn__service__pb2.LoadingSummary.FromString,
                )
        self.LoadDefaultModel = channel.unary_stream(
                '/basic_ai_service.BasicCNNService/LoadDefaultModel',
                request_serializer=basic__cnn__service__pb2.LoadingParameters.SerializeToString,
                response_deserializer=basic__cnn__service__pb2.LoadingSummary.FromString,
                )
        self.TrainModel = channel.unary_stream(
                '/basic_ai_service.BasicCNNService/TrainModel',
                request_serializer=basic__cnn__service__pb2.TrainingParameters.SerializeToString,
                response_deserializer=basic__cnn__service__pb2.TrainingSummary.FromString,
                )
        self.WhatImageIsThis = channel.unary_stream(
                '/basic_ai_service.BasicCNNService/WhatImageIsThis',
                request_serializer=basic__cnn__service__pb2.Base64Image.SerializeToString,
                response_deserializer=basic__cnn__service__pb2.InferingResult.FromString,
                )


class BasicCNNServiceServicer(object):
    """Interface exported by the server.
    """

    def LoadSampleData(self, request, context):
        """Loads a dataset from a file.

        A summary of the loading process is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadTrainedModel(self, request, context):
        """Loads a trained model from a file.

        A summary of the loading process is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadDefaultModel(self, request, context):
        """Loads the default CNN model.

        A summary of the loading pr ocess is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainModel(self, request, context):
        """Trains a model using the loaded dataset.

        A summary of the training process is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WhatImageIsThis(self, request, context):
        """Infer a result from a given data point.

        The result is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BasicCNNServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LoadSampleData': grpc.unary_stream_rpc_method_handler(
                    servicer.LoadSampleData,
                    request_deserializer=basic__cnn__service__pb2.SampleData.FromString,
                    response_serializer=basic__cnn__service__pb2.LoadingSummary.SerializeToString,
            ),
            'LoadTrainedModel': grpc.unary_stream_rpc_method_handler(
                    servicer.LoadTrainedModel,
                    request_deserializer=basic__cnn__service__pb2.ModelData.FromString,
                    response_serializer=basic__cnn__service__pb2.LoadingSummary.SerializeToString,
            ),
            'LoadDefaultModel': grpc.unary_stream_rpc_method_handler(
                    servicer.LoadDefaultModel,
                    request_deserializer=basic__cnn__service__pb2.LoadingParameters.FromString,
                    response_serializer=basic__cnn__service__pb2.LoadingSummary.SerializeToString,
            ),
            'TrainModel': grpc.unary_stream_rpc_method_handler(
                    servicer.TrainModel,
                    request_deserializer=basic__cnn__service__pb2.TrainingParameters.FromString,
                    response_serializer=basic__cnn__service__pb2.TrainingSummary.SerializeToString,
            ),
            'WhatImageIsThis': grpc.unary_stream_rpc_method_handler(
                    servicer.WhatImageIsThis,
                    request_deserializer=basic__cnn__service__pb2.Base64Image.FromString,
                    response_serializer=basic__cnn__service__pb2.InferingResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'basic_ai_service.BasicCNNService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BasicCNNService(object):
    """Interface exported by the server.
    """

    @staticmethod
    def LoadSampleData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/basic_ai_service.BasicCNNService/LoadSampleData',
            basic__cnn__service__pb2.SampleData.SerializeToString,
            basic__cnn__service__pb2.LoadingSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadTrainedModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/basic_ai_service.BasicCNNService/LoadTrainedModel',
            basic__cnn__service__pb2.ModelData.SerializeToString,
            basic__cnn__service__pb2.LoadingSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadDefaultModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/basic_ai_service.BasicCNNService/LoadDefaultModel',
            basic__cnn__service__pb2.LoadingParameters.SerializeToString,
            basic__cnn__service__pb2.LoadingSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TrainModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/basic_ai_service.BasicCNNService/TrainModel',
            basic__cnn__service__pb2.TrainingParameters.SerializeToString,
            basic__cnn__service__pb2.TrainingSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WhatImageIsThis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/basic_ai_service.BasicCNNService/WhatImageIsThis',
            basic__cnn__service__pb2.Base64Image.SerializeToString,
            basic__cnn__service__pb2.InferingResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
